generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  VISITOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("VISITOR")

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Calendar {
  id String @id @default(cuid())

  name String
  url  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id String @id @default(cuid())

  title       String
  description String?

  status TaskStatus @default(TODO)
  due    DateTime?

  taskTag TaskTag[]

  taskLabel TaskLabel[]

  subTasks   Task[]  @relation("SubTasks")
  parentTask Task?   @relation("SubTasks", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskTag {
  id String @id @default(cuid())

  name String

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskLabel {
  id String @id @default(cuid())

  name String

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model MoodReport {
  id String @id @default(cuid())

  energyRating Int @db.SmallInt
  moodRating   Int @db.SmallInt

  comment String?

  reportedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
